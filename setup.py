import os
import pathlib
import textwrap
import datetime

# --- Configuration ---
PROJECT_NAME = "your-minimal-site"

# Define directories relative to the project root
DIRECTORIES = [
    "content/notes",
    "templates",
    "static",  # For images, fonts, etc.
    "styles",
    "public",  # Output directory (often cleared/created by build script)
]

# Define files and their initial content using textwrap.dedent for clean multiline strings
# Includes the full content from the previous steps for build.py, templates, css etc.
# Meticulously checked for syntax correctness.
FILES = {
    "requirements.txt": textwrap.dedent("""
        Jinja2>=3.0
        Markdown>=3.3
        python-frontmatter>=1.0
        PyYAML>=5.4
    """), # Comma after entry

    "config.py": textwrap.dedent("""
        # config.py
        import datetime # Need this if using default sorting for dates

        SITE_NAME = "Your Name"
        SITE_AUTHOR = "Your Name"
        SITE_DESCRIPTION = "Thoughts and creations"
        BASE_URL = "http://localhost:8000" # Or your final domain "https://yourwebsite.com"

        CONTENT_DIR = "content"
        TEMPLATE_DIR = "templates"
        STATIC_DIR = "static"
        STYLES_DIR = "styles"
        OUTPUT_DIR = "public"

        # Define the sections of your site based on folders in 'content/'
        SECTIONS = {
            "notes": {
                "title": "Notes",             # Human-readable title
                "template": "page.html",      # Template for individual items
                "list_template": "list.html", # Template for the section index
                "sort_by": "date",            # Sort items by 'date' field in front matter
                "reverse_sort": True,         # Show newest items first
            },
            # Add other sections like 'projects', 'art' here following the same pattern
            # "projects": { ... }
        }
    """), # Comma after entry

    "content/notes/first-note.md": textwrap.dedent(f"""
        ---
        title: "My First Note"
        date: {datetime.date.today().strftime('%Y-%m-%d')}
        description: "A placeholder note generated during setup."
        ---

        Welcome to your new site!

        This is a sample note created by the setup script. You can edit it or add new Markdown files in the `content/notes/` directory.

        **Next Steps:**

        1.  Open your terminal in this project folder (`{PROJECT_NAME}`).
        2.  Install dependencies: `pip install -r requirements.txt`
        3.  Run the build script: `python build.py`
        4.  Serve the site locally (from the `public` directory): `cd public && python -m http.server`
        5.  Open `http://localhost:8000` in your browser.
    """), # Comma after entry (Using f-string here just for today's date)

    "templates/base.html": textwrap.dedent("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta name="description" content="{{ description | default(config.SITE_DESCRIPTION) }}">
            <meta name="author" content="{{ config.SITE_AUTHOR }}">
            <title>{{ title | default(config.SITE_NAME) }}</title>
            <link rel="stylesheet" href="/styles/main.css">
            {# Add links to fonts if using external ones, e.g., Google Fonts #}
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&family=Source+Serif+4:opsz,wght@8..60,400;8..60,600&display=swap" rel="stylesheet">
        </head>
        <body>
            <div class="container">
                <header class="site-header">
                    <h1><a href="/">{{ config.SITE_NAME }}</a></h1>
                    <nav>
                        {# Automatically generate links to section list pages #}
                        {% if config.SECTIONS %}
                        {% for section_key, section_config in config.SECTIONS.items() %}
                        <a href="/{{ section_key }}/">{{ section_config.title }}</a>
                        {% endfor %}
                        {% endif %}
                        {# Add other static links like About if needed #}
                        {# <a href="/about.html">About</a> #}
                    </nav>
                </header>
                <main>
                    {% block content %}
                    {# Content from other templates will go here #}
                    {% endblock %}
                </main>
                <footer class="site-footer">
                    <p>&copy; {% now 'local', '%Y' %} {{ config.SITE_AUTHOR }}. Generated by a custom script.</p>
                </footer>
            </div>
        </body>
        </html>
    """), # Comma after entry

    "templates/page.html": textwrap.dedent("""
        {% extends "base.html" %}

        {% block content %}
        <article class="prose">
            <header>
                <h1>{{ item.metadata.title }}</h1>
                {% if item.metadata.date %}
                <p class="date">
                    <time datetime="{{ item.metadata.date.isoformat() }}">
                        {{ item.metadata.date.strftime('%B %d, %Y') }}
                    </time>
                </p>
                {% endif %}
                {# Add other metadata if needed: tags, author, etc. #}
            </header>

            {{ item.content_html | safe }} {# Insert the converted HTML from Markdown #}

        </article>
        {% endblock %}
    """), # Comma after entry

    "templates/list.html": textwrap.dedent("""
        {% extends "base.html" %}

        {% block content %}
        <section>
            <h2>{{ section.title }}</h2>
            <ul class="item-list">
                {% for item in items %}
                <li>
                    <a href="{{ item.url }}">{{ item.metadata.title }}</a>
                    {% if item.metadata.date %}
                    <span class="date"> - {{ item.metadata.date.strftime('%Y-%m-%d') }}</span>
                    {% endif %}
                    {# Add description or excerpt if available in metadata #}
                    {% if item.metadata.description %}
                    <p class="description">{{ item.metadata.description }}</p>
                    {% endif %}
                </li>
                {% else %}
                <li>No items in this section yet.</li>
                {% endfor %}
            </ul>
        </section>
        {% endblock %}
    """), # Comma after entry

    "templates/index.html": textwrap.dedent("""
        {% extends "base.html" %}

        {% block content %}
        <section>
            <h2>Welcome</h2>
            <p>{{ config.SITE_DESCRIPTION }}</p>
            {% if config.SECTIONS %}
            <p>Explore the sections:</p>
            <ul>
                {% for section_key, section_config in config.SECTIONS.items() %}
                <li><a href="/{{ section_key }}/">{{ section_config.title }}</a></li>
                {% endfor %}
            </ul>
            {% endif %}

            {# Optional: Display latest items across all sections #}
            {#
            <h3>Latest Updates</h3>
            <ul class="item-list">
                {% for item in latest_items | default([]) | sort(attribute='metadata.date', reverse=true) | list | slice(5) %}
                <li>
                    <a href="{{ item.url }}">{{ item.metadata.title }}</a> ({{ item.metadata.date.strftime('%Y-%m-%d') }}) - <em>{{ item.section_key }}</em>
                </li>
                {% endfor %}
            </ul>
            #}
        </section>
        {% endblock %}
    """), # Comma after entry

    "styles/main.css": textwrap.dedent("""
        /* styles/main.css */

        :root {
            --font-body: 'Source Serif 4', serif;
            --font-heading: 'Inter', sans-serif;
            --text-color: #333;
            --bg-color: #fff;
            --link-color: #0070f3; /* Or a more muted color */
            --border-color: #eaeaea;
            --max-width: 700px; /* Adjust for desired reading width */
        }

        body {
            font-family: var(--font-body);
            line-height: 1.7;
            color: var(--text-color);
            background-color: var(--bg-color);
            margin: 0;
            padding: 20px;
            font-size: 17px; /* Bret Victor uses ~17px */
        }

        .container {
            max-width: var(--max-width);
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        /* --- Header & Footer --- */
        .site-header, .site-footer {
            margin-bottom: 3rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
            font-family: var(--font-heading);
        }

        .site-header h1 {
            margin: 0 0 0.5rem 0;
            font-size: 1.5rem; /* Relatively small heading */
            font-weight: 600;
        }
        .site-header h1 a {
            text-decoration: none;
            color: inherit;
        }

        .site-header nav {
            font-size: 0.9rem;
        }
        .site-header nav a {
            margin-right: 1rem;
            text-decoration: none;
            color: var(--link-color);
        }
         .site-header nav a:hover {
             text-decoration: underline;
         }


        .site-footer {
            margin-top: 4rem;
            border-top: 1px solid var(--border-color);
            border-bottom: none;
            padding-top: 1rem;
            font-size: 0.85rem;
            color: #666;
        }

        /* --- Typography & Content --- */
        main h1, main h2, main h3 {
            font-family: var(--font-heading);
            font-weight: 600;
            margin-top: 2em;
            margin-bottom: 1em;
            line-height: 1.3;
        }
         main h1 { font-size: 2rem; }
         main h2 { font-size: 1.6rem; }
         main h3 { font-size: 1.3rem; }


        p {
            margin-bottom: 1.2em;
        }

        a {
            color: var(--link-color);
            text-decoration: none; /* Remove underline by default */
        }
        a:hover {
            text-decoration: underline;
        }

        /* Style code blocks minimally */
        pre {
            background-color: #f8f8f8;
            border: 1px solid var(--border-color);
            padding: 1em;
            overflow-x: auto;
            font-size: 0.9em; /* Slightly smaller code font */
            border-radius: 4px; /* Slight rounding */
        }
        code {
            font-family: monospace, Consolas, 'Courier New', Courier; /* Common monospace fonts */
        }
        pre code {
            background-color: transparent;
            border: none;
            padding: 0;
        }
        /* Inline code */
        p code, li code, h1 code, h2 code, h3 code { /* Apply to headings too if needed */
           background-color: #f0f0f0; /* Slightly different background */
           padding: 0.2em 0.4em; /* Adjust padding */
           border-radius: 3px;
           font-size: 0.9em;
        }

        /* Lists */
        ul, ol {
            padding-left: 1.5em;
            margin-bottom: 1.2em;
        }
        li {
            margin-bottom: 0.5em;
        }

        /* Article specific styling */
        .prose header {
            margin-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 1rem;
        }
         .prose header h1 {
             margin-bottom: 0.2rem;
             margin-top: 0; /* Reduce top margin for article title */
         }

        .prose p.date {
            color: #666;
            font-size: 0.9em;
            margin-top: 0;
        }

        /* List styling */
        .item-list {
            list-style: none;
            padding-left: 0;
        }
        .item-list li {
            margin-bottom: 1.5rem;
            padding-bottom: 1rem; /* Add space below list item */
            border-bottom: 1px dashed var(--border-color); /* Separator */
        }
        .item-list li:last-child {
             border-bottom: none; /* No border for last item */
             margin-bottom: 0;
        }
         .item-list li a {
             font-weight: 600; /* Make titles stand out */
             font-size: 1.1em;
             font-family: var(--font-heading);
             display: block; /* Make entire block clickable (optional) */
             margin-bottom: 0.2rem;
             color: var(--text-color); /* Use default text color for list links */
         }
         .item-list li a:hover {
             color: var(--link-color); /* Change color on hover */
         }
        .item-list li .date {
            font-size: 0.85em;
            color: #666;
            font-family: var(--font-body); /* Use body font for date */
            display: inline-block; /* Keep date on same line if space allows */
            margin-left: 0.5em;
        }
         .item-list li .description {
             font-size: 0.95em;
             color: #555;
             margin-top: 0.3rem;
             line-height: 1.5; /* Improve readability of description */
         }

        blockquote {
            border-left: 3px solid var(--border-color);
            margin-left: 0;
            padding-left: 1em;
            color: #555;
            font-style: italic;
        }

        img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1.5em auto; /* Center images */
            border-radius: 4px; /* Optional subtle rounding */
        }

        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5em;
            font-size: 0.95em;
        }
        th, td {
            border: 1px solid var(--border-color);
            padding: 0.5em 0.75em;
            text-align: left;
        }
        th {
            background-color: #f8f8f8;
            font-weight: 600;
        }
    """), # Comma after entry

    "build.py": textwrap.dedent("""
        # build.py
        import os
        import shutil
        import datetime
        import frontmatter  # Handles YAML front matter
        import markdown     # Converts Markdown to HTML
        from jinja2 import Environment, FileSystemLoader, select_autoescape
        import sys # For exit

        # Import configuration
        try:
            import config
        except ImportError:
            print("ERROR: config.py not found. Ensure it exists in the same directory.")
            sys.exit(1) # Exit if config is missing

        # --- Helper Functions ---

        def clean_output_dir():
            \"\"\"Removes and recreates the output directory.\""\"
            print(f"Cleaning directory: {config.OUTPUT_DIR}")
            try:
                if os.path.exists(config.OUTPUT_DIR):
                    shutil.rmtree(config.OUTPUT_DIR)
                os.makedirs(config.OUTPUT_DIR)
            except OSError as e:
                print(f"Error cleaning output directory: {e}")
                sys.exit(1)

        def copy_static_assets():
            \"\"\"Copies static files (images, fonts, etc.) to the output directory.\""\"
            print(f"Copying static assets from {config.STATIC_DIR} to {config.OUTPUT_DIR}")
            if os.path.exists(config.STATIC_DIR) and os.path.isdir(config.STATIC_DIR):
                try:
                    shutil.copytree(config.STATIC_DIR, config.OUTPUT_DIR, dirs_exist_ok=True)
                except OSError as e:
                    print(f"Error copying static assets: {e}")
                    # Decide if this is fatal, maybe not? Continue?
            else:
                print(f"Static directory '{config.STATIC_DIR}' not found or not a directory, skipping.")

        def copy_styles():
            \"\"\"Copies CSS files to the output directory.\""\"
            styles_output_dir = os.path.join(config.OUTPUT_DIR, 'styles')
            print(f"Copying styles from {config.STYLES_DIR} to {styles_output_dir}")
            if os.path.exists(config.STYLES_DIR) and os.path.isdir(config.STYLES_DIR):
                try:
                    # Ensure target 'styles' dir exists in public
                    os.makedirs(styles_output_dir, exist_ok=True)
                    shutil.copytree(config.STYLES_DIR, styles_output_dir, dirs_exist_ok=True)
                except OSError as e:
                     print(f"Error copying styles: {e}")
            else:
                print(f"Styles directory '{config.STYLES_DIR}' not found or not a directory, skipping.")

        def setup_jinja_env():
            \"\"\"Sets up the Jinja2 templating environment.\""\"
            print(f"Setting up Jinja2 environment for templates in: {config.TEMPLATE_DIR}")
            try:
                env = Environment(
                    loader=FileSystemLoader(config.TEMPLATE_DIR),
                    autoescape=select_autoescape(['html', 'xml']),
                    # Enable access to config and functions in templates
                    globals={
                        'config': config,
                        'now': datetime.datetime.now # Example utility function
                    }
                )
                return env
            except Exception as e:
                 print(f"Error setting up Jinja2 environment: {e}")
                 sys.exit(1)


        def parse_markdown_file(filepath):
            \"\"\"Parses a Markdown file, extracting front matter and converting content.\""\"
            try:
                post = frontmatter.load(filepath)
                html_content = markdown.markdown(
                    post.content,
                    extensions=[
                        'fenced_code', # Support ```code``` blocks
                        'codehilite',  # Add syntax highlighting classes (requires CSS)
                        'tables',      # Support Markdown tables
                        'toc',         # Table of contents (optional)
                        'nl2br',       # Convert newlines to <br> (optional, can affect code blocks)
                        'extra'        # Includes many common extensions like footnotes, abbr, etc.
                    ]
                )
                # Ensure date is a Python date object if present
                if 'date' in post.metadata and not isinstance(post.metadata['date'], datetime.date):
                   try:
                       # Handle both date and datetime strings
                       date_str = str(post.metadata['date'])
                       if ' ' in date_str: # Likely datetime
                            parsed_date = datetime.datetime.strptime(date_str.split(' ')[0], '%Y-%m-%d').date()
                       else: # Likely date only
                            parsed_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
                       post.metadata['date'] = parsed_date
                   except (ValueError, TypeError):
                       print(f"Warning: Could not parse date '{post.metadata.get('date')}' in {filepath}. Expected YYYY-MM-DD.")
                       # Assign None or keep original string? Let's assign None for consistent sorting.
                       post.metadata['date'] = None

                return {
                    "metadata": post.metadata,
                    "content_html": html_content,
                    "filepath": filepath,
                    "slug": os.path.splitext(os.path.basename(filepath))[0] # Use filename (without ext) as slug
                }
            except Exception as e:
                print(f"Error parsing Markdown file {filepath}: {e}")
                return None # Return None to indicate failure

        def render_template(env, template_name, context):
            \"\"\"Renders a Jinja2 template with the given context.\""\"
            try:
                template = env.get_template(template_name)
                return template.render(context)
            except Exception as e:
                print(f"Error rendering template {template_name} with context keys {list(context.keys())}: {e}")
                # In production, might return a generic error page HTML
                return f"<h1>Error rendering template</h1><p>{e}</p>" # Return error message in output

        def build_site():
            \"\"\"Main function to build the entire static site.\""\"
            start_time = datetime.datetime.now()
            print("Starting site build...")

            # 1. Setup
            clean_output_dir() # Exits on error
            copy_static_assets() # Continues on error
            copy_styles() # Continues on error
            jinja_env = setup_jinja_env() # Exits on error

            all_items = [] # To potentially collect items from all sections for homepage

            # 2. Process Sections defined in config.py
            if not hasattr(config, 'SECTIONS') or not isinstance(config.SECTIONS, dict):
                print("ERROR: 'SECTIONS' dictionary not found or invalid in config.py")
                sys.exit(1)

            for section_key, section_config in config.SECTIONS.items():
                if not isinstance(section_config, dict):
                    print(f"Warning: Invalid configuration for section '{section_key}' in config.py. Skipping.")
                    continue

                section_title = section_config.get('title', section_key.capitalize()) # Default title
                print(f"\\nProcessing section: {section_key} ({section_title})")

                section_content_dir = os.path.join(config.CONTENT_DIR, section_key)
                section_output_dir = os.path.join(config.OUTPUT_DIR, section_key)

                if not os.path.isdir(section_content_dir):
                    print(f"Warning: Content directory not found for section '{section_key}': {section_content_dir}. Skipping section.")
                    continue # Skip this section if content dir doesn't exist

                try:
                    os.makedirs(section_output_dir, exist_ok=True) # Ensure output dir exists
                except OSError as e:
                    print(f"Error creating output directory '{section_output_dir}': {e}. Skipping section.")
                    continue

                section_items = []

                # Find and parse all markdown files in the section directory
                try:
                    filenames = os.listdir(section_content_dir)
                except OSError as e:
                     print(f"Error reading content directory '{section_content_dir}': {e}. Skipping section.")
                     continue

                for filename in filenames:
                    if filename.lower().endswith(".md") and not filename.startswith('.'): # Ignore hidden files
                        filepath = os.path.join(section_content_dir, filename)
                        if os.path.isfile(filepath): # Ensure it's a file
                            parsed_item = parse_markdown_file(filepath)
                            if parsed_item: # Check if parsing succeeded
                                # Add URL and section info
                                parsed_item["url"] = f"/{section_key}/{parsed_item['slug']}.html"
                                parsed_item["section_key"] = section_key
                                section_items.append(parsed_item)

                # Sort items if configured
                sort_key = section_config.get("sort_by")
                if sort_key and section_items: # Only sort if key exists and items exist
                    reverse_sort = section_config.get("reverse_sort", False)

                    # Handle cases where the sort key might be missing or have incompatible types
                    def get_sort_value(item):
                        value = item['metadata'].get(sort_key)
                        if value is None:
                            # Provide default fallback values for sorting if key is missing
                            if isinstance(sort_key, str) and 'date' in sort_key:
                                return datetime.date.min if reverse_sort else datetime.date.max
                            else:
                                return 0 # Or float('-inf') / float('inf') depending on desired behavior
                        return value

                    try:
                        # Use a try-except block during sort in case of incompatible types comparison
                        section_items.sort(key=get_sort_value, reverse=reverse_sort)
                        print(f"Sorted {len(section_items)} items by '{sort_key}' (reverse={reverse_sort})")
                    except TypeError as e:
                         print(f"Warning: Could not sort section '{section_key}' by '{sort_key}'. Check data types are comparable. Error: {e}")


                all_items.extend(section_items) # Add to global list

                # Build individual item pages
                item_template = section_config.get("template", "page.html") # Default to page.html
                print(f"Building {len(section_items)} individual pages using template '{item_template}'...")
                for item in section_items:
                    output_path = os.path.join(section_output_dir, f"{item['slug']}.html")
                    page_title = f"{item['metadata'].get('title', 'Untitled')} - {config.SITE_NAME}"
                    context = {
                        "item": item,
                        "title": page_title,
                        "description": item['metadata'].get('description', config.SITE_DESCRIPTION)
                        # Pass the global config object too, maybe templates need it
                        # "config": config # Already available globally in Jinja env
                    }
                    html_output = render_template(jinja_env, item_template, context)
                    try:
                        with open(output_path, "w", encoding="utf-8") as f:
                            f.write(html_output)
                        # print(f"  Built: {output_path}") # Uncomment for verbose output
                    except OSError as e:
                        print(f"Error writing file {output_path}: {e}")
                    except Exception as e: # Catch other potential errors during write
                        print(f"Unexpected error writing file {output_path}: {e}")


                # Build section list page (index.html for the section)
                list_template = section_config.get("list_template", "list.html") # Default to list.html
                list_output_path = os.path.join(section_output_dir, "index.html")
                list_title = f"{section_title} - {config.SITE_NAME}" # Use defined section title
                print(f"Building section list page '{list_output_path}' using template '{list_template}'...")
                context = {
                    "items": section_items,
                    "section": section_config, # Pass section config to list template
                    "section_key": section_key, # Pass the key too
                    "title": list_title
                }
                html_output = render_template(jinja_env, list_template, context)
                try:
                    with open(list_output_path, "w", encoding="utf-8") as f:
                        f.write(html_output)
                except OSError as e:
                     print(f"Error writing file {list_output_path}: {e}")
                except Exception as e:
                     print(f"Unexpected error writing file {list_output_path}: {e}")


            # 3. Build Top-Level Pages (e.g., main index.html)
            print("\\nBuilding top-level pages...")
            index_output_path = os.path.join(config.OUTPUT_DIR, "index.html")
            context = {
                "title": config.SITE_NAME, # Homepage title
                "description": config.SITE_DESCRIPTION,
                "latest_items": all_items # Pass all items for potential use on homepage
            }
            html_output = render_template(jinja_env, "index.html", context)
            try:
                with open(index_output_path, "w", encoding="utf-8") as f:
                    f.write(html_output)
                print(f"Built homepage: {index_output_path}")
            except OSError as e:
                print(f"Error writing file {index_output_path}: {e}")
            except Exception as e:
                 print(f"Unexpected error writing file {index_output_path}: {e}")


            # --- Add logic here to build other top-level pages if needed ---
            # Example: Build an about page from content/about.md if it exists
            # about_md_path = os.path.join(config.CONTENT_DIR, "about.md")
            # if os.path.exists(about_md_path) and os.path.isfile(about_md_path):
            #    about_item = parse_markdown_file(about_md_path)
            #    if about_item:
            #        about_output_path = os.path.join(config.OUTPUT_DIR, "about.html")
            #        # Decide on template, e.g., use 'page.html' or a specific 'about.html'
            #        about_template = getattr(config, 'TOP_LEVEL_TEMPLATE', 'page.html') # Check if TOP_LEVEL_TEMPLATE exists in config
            #        context = {"item": about_item, "title": f"{about_item['metadata'].get('title', 'About')} - {config.SITE_NAME}"}
            #        html_output = render_template(jinja_env, about_template, context)
            #        try:
            #            with open(about_output_path, "w", encoding="utf-8") as f:
            #                 f.write(html_output)
            #            print(f"Built page: {about_output_path}")
            #        except OSError as e: print(f"Error writing file {about_output_path}: {e}")
            #        except Exception as e: print(f"Unexpected error writing file {about_output_path}: {e}")


            # 4. Finish
            end_time = datetime.datetime.now()
            duration = end_time - start_time
            print(f"\\nSite build complete in {duration.total_seconds():.2f} seconds.")
            print(f"Output generated in: {config.OUTPUT_DIR}")


        # --- Main Execution ---
        if __name__ == "__main__":
            # Added import for datetime here as it's used in f-string for note date
            import datetime
            build_site()

    """) # NO comma after last entry in dictionary
} # Closes the FILES dictionary

# --- Script Logic ---
def create_project_structure():
    """Creates the project directory and all defined subdirectories and files."""
    project_path = pathlib.Path.cwd() / PROJECT_NAME
    print(f"Creating project structure at: {project_path}")

    try:
        # Create root project directory
        project_path.mkdir(exist_ok=True)
        print(f"Created: {project_path}")

        # Create subdirectories
        for dir_path_str in DIRECTORIES:
            dir_path = project_path / dir_path_str
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"Created: {dir_path}")

        # Create files with content
        for file_path_str, content in FILES.items():
            file_path = project_path / file_path_str
            # Ensure parent directory exists (should already from above)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            # Write content, removing leading/trailing whitespace from heredoc/dedent
            file_path.write_text(content.strip(), encoding='utf-8')
            print(f"Created: {file_path}")

        print("\nProject structure created successfully!")
        print("\nNext Steps:")
        print(f"1. Navigate into the project directory: cd {PROJECT_NAME}")
        print("2. Install required Python packages: pip install -r requirements.txt")
        print("3. Run the build script: python build.py")
        print("4. Serve the generated site locally:")
        print("   cd public")
        print("   python -m http.server")
        print("5. Open http://localhost:8000 (or the port shown) in your browser.")

    except OSError as e:
        print(f"\nError creating project structure: {e}")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")


# --- Main Execution ---
if __name__ == "__main__":
    # Added import for datetime here as it's used in f-string for note date within the FILES dict
    import datetime
    create_project_structure()